As per the question I can conclude that the biggest challenge here is data and the cost attached to data storage and data retrieval. I have to suggest a solution to give a solution which can optimize storage cost and data retrieval latency.

I can think of 2 solutions:

First is that we can move data from hot/cool tier to archive tier after every 3 months. This solution can help reduce storage cost significantly. But as per the question we also have to maintain data retrieval latency this will be an important challenge as Data retrieval from Archive storage can be costly and it takes a lot of time to retrieve data from Archive tier. Retrieving data from Azure's Archive tier can take up to 15 hours for a standard retrieval, or under an hour for high priority retrievals, especially for objects under 10 GB. 

Second is we can implement data compression to reduce storage cost. This solution can help reduce storage cost by it will increase processing overhead for the system which can impact system performance and might need for vertical scaling of the system.

An optimal solution can be to find a balance between above 2 solutions.

The hybrid approach will look like below.

Core Strategy: Tiered Storage with Intelligent Access and Selective Compression

Hot Tier (e.g., Azure SQL Database, Azure Cosmos DB - Analytical Store, or highly optimized Azure Storage with Blob Indexing):

Data: Keep the most frequently accessed and recent billing records here (e.g., last 3-6 months, depending on access patterns). This is for immediate operational needs, dashboards, and common reporting.
Access: Sub-second retrieval.
Cost: Higher storage cost per GB, but optimized for performance.
Compression: Minimal or no compression applied here, as performance is paramount.
Cool Tier (e.g., Azure Blob Storage - Cool Tier):

Data: Billing records from 3-6 months old up to 1-2 years old. This tier is for less frequent, but still potentially time-sensitive, access (e.g., quarterly reports, audit requests, deep dives).
Access: Retrieval times in milliseconds to seconds (faster than Archive, slower than Hot).
Cost: Significantly lower than Hot tier.
Compression: Apply a suitable compression algorithm (e.g., Gzip, Snappy, Brotli) during the data transfer process to the Cool tier. This reduces storage costs further without significantly impacting retrieval times for this tier. The decompression overhead is manageable for less frequent access.
Archive Tier (e.g., Azure Blob Storage - Archive Tier):

Data: Billing records older than 1-2 years (or whatever defines "historical" for your organization). This data is for very infrequent, long-term retention, compliance, and historical analysis where latency is less critical.
Access: As you've noted, hours for standard retrieval.
Cost: Extremely low storage cost.
Compression: Apply the highest practical compression ratio during the data transfer to the Archive tier. Since retrieval latency is already high, maximizing storage savings here is the priority.
Data Movement and Automation:

Azure Data Factory or Azure Logic Apps/Functions: Implement automated pipelines to move data between tiers based on age.
Hot to Cool: Schedule a job to move data that crosses the 3-6 month threshold.
Cool to Archive: Schedule a job to move data that crosses the 1-2 year threshold.
Serverless Architecture Integration: Utilize Azure Functions for data processing and compression before moving to the Cool and Archive tiers. This ensures the overhead is handled by event-driven, scalable compute, not your primary operational system.
Intelligent Data Access Strategy (Crucial for User Experience):

This is where you bridge the gap between user needs and the underlying storage tiers.

Unified Data Access Layer:

Develop a serverless API layer (e.g., Azure Functions with Azure API Management) that acts as a single point of entry for all billing record queries.
This API should intelligently route queries based on the requested time range.
Recent Data (Hot Tier): Direct queries to the Hot tier.
Older Data (Cool Tier): Query the Cool tier. The API should handle the decompression on the fly before returning the data.
Archived Data (Archive Tier): For requests for very old data, the API should:
Inform the user about the expected retrieval time.
Initiate a "rehydrate" request from the Archive tier to a more accessible tier (e.g., Cool or even Hot temporarily for immediate use).
Provide a mechanism for notification when the data is available. This could be a webhook, email, or a dashboard update.
Consider "high priority retrieval" for urgent requests, accepting the higher cost for under-hour retrieval for smaller objects.
Caching for Frequently Accessed Older Data:

If certain older datasets in the Cool or Archive tier are periodically accessed (e.g., monthly reports that need data from the previous year), implement a caching mechanism (e.g., Azure Cache for Redis or even a temporary storage in the Hot tier) to reduce repeated retrieval costs and latency.
Reporting and Analytics Separate from Operational:

For extensive analytical queries or large data extracts from historical data, consider using tools like Azure Synapse Analytics or Azure Data Lake Storage Gen2 with Azure Databricks. These are designed for large-scale data processing and can query directly from compressed data in Cool/Archive tiers (though rehydration might still be needed for Archive). This offloads heavy analytical workloads from your operational database.
Addressing Specific Concerns:

Processing Overhead for Compression (Solution 2): By offloading compression to Azure Functions triggered during the data movement process, you distribute the processing overhead and avoid impacting the performance of your live operational system. These functions can scale independently.
Data Retrieval Latency from Archive (Solution 1): The intelligent access strategy addresses this by managing user expectations, providing rehydration mechanisms, and using high-priority retrieval for critical cases. For general operational access, data should reside in Hot or Cool.

Diagram of the Proposed Architecture:
User/Application
      |
      V
Azure API Management (API Gateway)
      |
      V
Azure Functions (Intelligent Data Access Layer - Routing, Decompression, Rehydration Requests)
      |
      +--------------------------------+--------------------------------+
      |                                |                                |
      V                                V                                V
Azure SQL DB/Cosmos DB             Azure Blob Storage             Azure Blob Storage
(Hot Tier - Recent Data)      (Cool Tier - Compressed)      (Archive Tier - Highly Compressed)
                                      |                                |
                                      V                                V
                                 Azure Functions                Azure Functions
                                 (Compression/Movement)         (Compression/Movement)
                                 (Hot -> Cool)                  (Cool -> Archive)